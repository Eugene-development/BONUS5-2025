/** @type {import('./$types').LayoutServerLoad} */
export async function load({ locals, fetch, cookies, url }) {
	console.log('üîÑ Layout server load:', {
		path: url.pathname,
		isAuthenticated: locals.isAuthenticated
	});

	// –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
	if (!locals.isAuthenticated) {
		return {
			user: null,
			isAuthenticated: false
		};
	}

	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
		const response = await fetch('/api/user', {
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
				'X-Requested-With': 'XMLHttpRequest',
				// –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ cookies –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
				Cookie: cookies
					.getAll()
					.map((cookie) => `${cookie.name}=${cookie.value}`)
					.join('; ')
			},
			credentials: 'include'
		});

		if (response.ok) {
			const data = await response.json();
			console.log('‚úÖ User data loaded:', data.user || data);
			return {
				user: data.user || data,
				isAuthenticated: true
			};
		} else {
			// –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
			console.log('‚ùå User API failed:', response.status);
			return {
				user: null,
				isAuthenticated: false
			};
		}
	} catch (error) {
		console.error('üí• Auth check failed:', error);
		return {
			user: null,
			isAuthenticated: false
		};
	}
}
